import { body, param, validationResult } from "express-validator";
import {
  ErrorBadRequest,
  ErrorNotFound,
  ErrorUnauthenticated,
  ErrorUnauthorized,
} from "../errors/customErrors.js";
import { JOB_STATUS, JOB_TYPE, USER_ROLE } from "../utils/constants.js";
import mongoose from "mongoose";
import Job from "../models/JobModel.js";
import User from "../models/UserModel.js";
import { StatusCodes } from "http-status-codes";

// Master Error Return Function
const withValidationErrors = (validateValues) => {
  return [
    validateValues,
    (req, res, next) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        const errorMessages = errors.array().map((error) => error.msg);
        parseErrors(errorMessages);
      }
      next();
    },
  ];
};

const parseErrors = (errorMessages) => {
  errorMessages.forEach((errorMessage) => {
    // The errorMessage will not contain a statusCode if generated by express-validator. In all these
    // cases, the statusCode is 400.
    let statusCode = `${StatusCodes.BAD_REQUEST}`;
    let message = errorMessage;

    // If the error was thrown by a custom express-validator method created below, the flag "true" is
    // added to the error throw statement, which adds the appropriate statusCode to the beginning
    // of the errorMessage string. This block separates the statusCode from the message.
    if (errorMessage.startsWith(`{{`)) {
      statusCode = errorMessage.slice(2, 5);
      message = errorMessage.slice(7);
    }

    // Now that the statusCode is correct, throw the appropriate error.
    switch (statusCode) {
      case `${StatusCodes.NOT_FOUND}`:
        throw new ErrorNotFound(message);

      case `${StatusCodes.BAD_REQUEST}`:
        throw new ErrorBadRequest(message);

      case `${StatusCodes.UNAUTHORIZED}`:
        throw new ErrorUnauthenticated(message);

      case `${StatusCodes.FORBIDDEN}`:
        throw new ErrorUnauthorized(message);
    }
  });
};

// Specific Validators
export const validateJobInput = withValidationErrors([
  body("company").notEmpty().withMessage("company is required"),
  body("position").notEmpty().withMessage("position is required"),
  body("jobLocation").notEmpty().withMessage("job location is required"),
  body("jobStatus")
    .notEmpty()
    .withMessage("job status is required")
    .isIn(Object.values(JOB_STATUS))
    .withMessage("invalid job status value"),
  body("jobType")
    .notEmpty()
    .withMessage("job type is required")
    .isIn(Object.values(JOB_TYPE))
    .withMessage("invalid job type value"),
]);

export const validateJobIdParam = withValidationErrors([
  param("id").custom(async (value, { req }) => {
    const isValidId = mongoose.Types.ObjectId.isValid(value);
    if (!isValidId) throw new ErrorBadRequest("invalid MongoDB id");
    const job = await Job.findById(value);
    if (!job) {
      throw new ErrorNotFound(`No job with id ${value}`, true);
    }
    const isAdmin = req.user.role === USER_ROLE.ADMIN;
    const isOwner = req.user.userId === job.createdBy.toString();
    if (!isAdmin && !isOwner)
      throw new ErrorUnauthorized("not authorized to access this route", true);
  }),
]);

export const validateRegisterUserInput = withValidationErrors([
  body("name").notEmpty().withMessage("name is required"),
  body("email")
    .notEmpty()
    .withMessage("email is required")
    .isEmail()
    .withMessage("invalid email format")
    .custom(async (email) => {
      const user = await User.findOne({ email });
      if (user) {
        throw new ErrorBadRequest(
          `User already exists with email ${email}`,
          true
        );
      }
    }),
  body("password")
    .notEmpty()
    .withMessage("password is required")
    .isLength({ min: 8 })
    .withMessage("password must be at least 8 characters long"),
  body("location").notEmpty().withMessage("location is required"),
  body("lastName").notEmpty().withMessage("last name is required"),
]);

export const validateLoginUserInput = withValidationErrors([
  body("email")
    .notEmpty()
    .withMessage("email is required")
    .isEmail()
    .withMessage("invalid email format"),
  body("password").notEmpty().withMessage("password is required"),
]);

export const validateUserUpdateInput = withValidationErrors([
  body("name").notEmpty().withMessage("name is required"),
  body("email")
    .notEmpty()
    .withMessage("email is required")
    .isEmail()
    .withMessage("invalid email format")
    .custom(async (email, { req }) => {
      const user = await User.findOne({ email });
      if (user && user._id.toString() !== req.user.userId) {
        throw new ErrorBadRequest(
          `Another user already exists with email ${email}`,
          true
        );
      }
    }),
  body("location").notEmpty().withMessage("location is required"),
  body("lastName").notEmpty().withMessage("last name is required"),
]);
